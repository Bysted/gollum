(in-package :gollum)

(defvar *input-window-gravity* :bottom-center)

(defun add-cursor (string cursor)
  (let* ((len (length string))
	 (loc (+ len cursor))
	 (before (subseq string 0 loc))
	 (cursored (handler-case (char string loc)
		     (sb-int:invalid-array-index-error () " ")))
	 (after (handler-case (subseq string (1+ loc))
		  (sb-kernel:bounding-indices-bad-error () ""))))
    (concat before "^R" (string cursored) "^r" after)))

(defun search-word-boundary (string cursor &optional (reserve-p nil))
  (let* ((len (length string))
	 (start (if reserve-p 0 (min len (+ len cursor 1))))
	 (end (if reserve-p (max 0 (+ len cursor -1)) len))
	 (result (position-if-not #'alphanumericp string :start start :end end :from-end reserve-p)))
    (if result
	(if reserve-p
	    (1+ (- result len))
	    (- result len))
	(if reserve-p
	    (- len)
	    0))))

(let ((screen nil)
      (prompt "")
      (cursor 0))
  (defun screen-input-internal ()
    (let ((display (display screen)))
      (setup-input-window screen prompt)
      (setf (current-keymap display) :input-map)))
  (defun update-input-window ()
    (let* ((content (concat prompt (add-cursor (input-buffer screen) cursor) " "))
	   (window (input-window screen))
	   (gc (input-gc screen)))
      (output-to-window screen window gc *input-window-gravity* content)))
  (defun backward-char (&optional (num 1))
    (let ((c (- cursor num)))
      (when (<= (abs c) (length (input-buffer screen)))
	(setf cursor c)
	(update-input-window))))
  (defun backward-word ()
    (let* ((buffer (input-buffer screen))
	   (c (search-word-boundary buffer cursor t)))
      (backward-char (- cursor c))))
  (defun forward-char (&optional (num 1))
    (let ((c (+ cursor num)))
      (when (<= c 0)
	(setf cursor c)
	(update-input-window))))
  (defun forward-word ()
    (let* ((buffer (input-buffer screen))
	   (c (search-word-boundary buffer cursor)))
      (forward-char (- c cursor))))
  (defun self-insert (char)
    (let* ((buffer (input-buffer screen))
	   (len (length buffer))
	   (loc (+ cursor len))
	   (before (subseq buffer 0 loc))
	   (after (subseq buffer loc)))
      (setf (input-buffer screen) (concat before (string char) after))
      (update-input-window)))
  (defun delete-char (&optional (num 1))
    (let* ((buffer (input-buffer screen))
	   (len (length buffer))
	   (loc1 (+ cursor len))
	   (loc2 (+ loc1 num))
	   (start (min loc1 loc2))
	   (end (max loc1 loc2))
	   (before (subseq buffer 0 start))
	   (after (subseq buffer end)))
      (setf (input-buffer screen) (concat before after)
	    cursor (- end len))
      (update-input-window)))
  (defun backward-delete ()
    (delete-char -1))
  (defun init-screen-input (s p)
    (setf screen s
	  prompt p
	  cursor 0))
  (defun submit-input ()
    (xlib:unmap-window (input-window screen))
    (setf cursor 0)
    (flush-display (display screen))
    (bordeaux-threads:condition-notify (input-cv screen)))
  (defun cancel-input ()
    (xlib:unmap-window (input-window screen))
    (setf (input-buffer screen) nil
	  cursor 0)
    (bordeaux-threads:condition-notify (input-cv screen))))

(defun bind-self-inserts (display &rest chars)
  (mapc (lambda (char)
	  (bind-key :input-map (string char) (list 'self-insert char) display t)) chars))

(defun setup-input-map (display)
  (bind-self-inserts display
		     #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z
		     #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z
		     #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\0
		     #\! #\" #\# #\$ #\% #\& #\' #\( #\) #\* #\+ #\, #\. #\/ #\: #\; #\< #\= #\> #\? #\@ #\[ #\\ #\] #\^ #\_ #\` #\{ #\| #\} #\~)
  (bind-key :input-map "C-g" 'cancel-input display)
  (bind-key :input-map "minus" (list 'self-insert #\-) display t) ;"-" is used as seperator in key-desc
  (bind-key :input-map "Return" 'submit-input display)
  (bind-key :input-map "space" (list 'self-insert #\Space) display t)
  (bind-key :input-map "BackSpace" 'backward-delete display t)
  (bind-key :input-map "C-f" 'forward-char display t)
  (bind-key :input-map "C-b" 'backward-char display t)
  (bind-key :input-map "M-f" 'forward-word display t)
  (bind-key :input-map "M-b" 'backward-word display t))

(defun setup-input-window (screen prompt)
  (let* ((window (input-window screen))
	 (gc (input-gc screen)))
    (output-to-window screen window gc *input-window-gravity* (concat prompt "^R "))
    (xlib:grab-keyboard window :owner-p nil :sync-keyboard-p nil :sync-pointer-p nil))
  (init-screen-input screen prompt))

;; warning!!!:this method is never for regular using,it should always be called by the event-processing thread,with a new thread handle it,or it may cause GOLLUM hang(thread dead lock)
(defmethod screen-input ((screen screen) prompt)
  (let ((display (display screen)))
    (bordeaux-threads:with-recursive-lock-held ((input-buffer-lock screen))
      (setf (input-buffer screen) "")
      (setup-input-window screen prompt)
      (setf (current-keymap display) :input-map)
      (screen-input-internal)
      (bordeaux-threads:condition-wait (input-cv screen) (input-buffer-lock screen))
      (input-buffer screen))))

(defmacro with-screen-input ((screen prompt input) &body body)
  `(bordeaux-threads:make-thread (lambda ()
				   (let ((,input (screen-input ,screen ,prompt)))
				     ,@body)) :name "input-thread"))


