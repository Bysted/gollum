(in-package :gollum)

(defvar *input-window-gravity* :bottom-center)

(defun input-window-screen (window)
  (loop for id being the hash-keys in (screens (current-display)) using (hash-value screen)
     when (xlib:window-equal (input-window screen) window)
     return screen))

(let ((screen nil)
      (prompt ""))
  (defun screen-input-internal ()
    (let ((display (display screen)))
      (setup-input-window screen prompt)
      (setf (current-keymap display) :input-map)))
  (defun set-input-prompt (string)
    (setf prompt string))
  (defun update-input-window ()
    (let* ((font (input-font screen))
	   (content (concat prompt (input-buffer screen)))
	   (window (input-window screen))
	   (gc (input-gc screen)))
      (setup-window-for-drawing-glyphs screen window *input-window-gravity* gc font content)
      (xlib:draw-image-glyphs window gc *internal-window-horizontal-padding* (+ *internal-window-vertical-padding* (xlib:font-ascent font)) content)
      (flush-display (display screen))))
  (defun self-insert (char)
    (setf (input-buffer screen) (concat (input-buffer screen) (string char)))
    (update-input-window))
  (defun backward-delete (&optional (num 1))
    (let* ((input-buffer (input-buffer screen))
	   (length (length input-buffer)))
      (when (plusp length)
	(setf (input-buffer screen) (subseq input-buffer 0 (- length num)))
	(update-input-window))))
  (defun set-input-screen (s)
    (setf screen s))
  (defun submit-input ()
    (setf (current-keymap (display screen)) :top-map)
    (xlib:ungrab-keyboard (xdisplay (display screen)))
    (xlib:unmap-window (input-window screen))
    (flush-display (display screen))
    (bordeaux-threads:condition-notify (input-cv screen))))

(defun bind-self-inserts (display &rest chars)
  (mapc (lambda (char)
	  (bind-key :input-map (string char) (list 'self-insert char) display)) chars))

(defun setup-input-map (display)
  (bind-self-inserts display
		     #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z
		     #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z
		     #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\0
		     #\! #\" #\# #\$ #\% #\& #\' #\( #\) #\* #\+ #\, #\. #\/ #\: #\; #\< #\= #\> #\? #\@ #\[ #\\ #\] #\^ #\_ #\` #\{ #\| #\} #\~)
  (bind-key :input-map "minus" (list 'self-insert #\-) display) ;"-" is used as seperator in key-description
  (bind-key :input-map "Return" 'submit-input display)
  (bind-key :input-map "space" (list 'self-insert #\Space) display)
  (bind-key :input-map "BackSpace" 'backward-delete display))

(defun setup-input-window (screen prompt)
  (let* ((font (input-font screen))
	 (height (+ (xlib:font-descent font) (xlib:font-ascent font)))
	 (width (xlib:text-width font prompt))
	 (window (input-window screen))
	 (gc (input-gc screen)))
    (setup-window-for-drawing-glyphs screen window *input-window-gravity* gc font prompt)
    (xlib:grab-keyboard window :owner-p nil :sync-keyboard-p nil :sync-pointer-p nil)
    (xlib:draw-image-glyphs window gc *internal-window-horizontal-padding* (+ *internal-window-vertical-padding* (xlib:font-ascent font)) prompt))
  (flush-display (display screen))
  (set-input-prompt prompt)
  (set-input-screen screen))

;; warning!!!:this method is never for regular using,it should always be called by the event-processing thread,with a new thread handle it,or it may cause GOLLUM hang(thread dead lock)
(defmethod screen-input ((screen screen) prompt)
  (let ((display (display screen)))
    (bordeaux-threads:with-recursive-lock-held ((input-buffer-lock screen))
      (setf (input-buffer screen) "")
      (setup-input-window screen prompt)
      (setf (current-keymap display) :input-map)
      (screen-input-internal)
      (bordeaux-threads:condition-wait (input-cv screen) (input-buffer-lock screen))
      (input-buffer screen))))

(defmacro with-screen-input ((screen prompt input) &body body)
  `(bordeaux-threads:make-thread (lambda ()
				   (let ((,input (screen-input ,screen ,prompt)))
				     ,@body)) :name "input-thread"))
